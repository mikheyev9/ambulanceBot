import re
from datetime import datetime

from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command

from logger import logger
from .states import AddPatientStates


async def send_main_menu(message: types.Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç–∞")],
            [KeyboardButton(text="üìÖ –ü–∞—Ü–∏–µ–Ω—Ç—ã —Å–µ–≥–æ–¥–Ω—è"),
             KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é")]
        ],
        resize_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)


async def cmd_start(message: types.Message):
    await send_main_menu(message)


async def handle_attempts(
        message: types.Message, state: FSMContext, attempts_key: str, max_attempts: int,
        error_message: str, clear_message: str):
    data = await state.get_data()
    attempts = data.get(attempts_key, 0)

    attempts += 1
    if attempts < max_attempts:
        await state.update_data({attempts_key: attempts})
        await message.answer(f"{error_message} "
                             f"–ï—Å–ª–∏ –≤—ã —Å–¥–µ–ª–∞–µ—Ç–µ –æ—à–∏–±–∫—É –µ—â–µ {max_attempts - attempts} "
                             f"—Ä–∞–∑(–∞), –≤—ã –±—É–¥–µ—Ç–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
    else:
        await message.answer(clear_message)
        await state.clear()
        await send_main_menu(message)
    return attempts


async def cmd_add_patient(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø–∞—Ü–∏–µ–Ω—Ç–∞:")
    await state.set_state(AddPatientStates.ADDING_NAME)


async def process_name(message: types.Message, state: FSMContext):
    name = message.text.strip()

    if not name or not re.match(r'^[a-zA-Z–∞-—è–ê-–Ø—ë–Å ]+$', name):
        attempts = await handle_attempts(
            message, state, "name_attempts", 3,
            "‚ö†Ô∏è –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º –∏–ª–∏ —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ –ø—Ä–æ–±–µ–ª–æ–≤."
            " –§–ò–û –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –ø—Ä–æ–±–µ–ª—ã.",
            "‚ö†Ô∏è –í—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑-–∑–∞ –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω—ã—Ö –æ—à–∏–±–æ–∫ –ø—Ä–∏ –≤–≤–æ–¥–µ –∏–º–µ–Ω–∏."
        )
        if attempts >= 3:
            return
        return

    await state.update_data(full_name=name, name_attempts=0)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –ø–∞—Ü–∏–µ–Ω—Ç–∞ (—Ñ–æ—Ä–º–∞—Ç: –ì–ì–ì–ì-–ú–ú-–î–î):")
    await state.set_state(AddPatientStates.ADDING_BIRTHDATE)


async def process_birthdate(message: types.Message, state: FSMContext, db):
    text = message.text.strip()

    if not text:
        attempts = await handle_attempts(
            message, state, "birthdate_attempts", 3,
            "‚ö†Ô∏è –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π –∏–ª–∏ —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ –ø—Ä–æ–±–µ–ª–æ–≤.",
            "‚ö†Ô∏è –í—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑-–∑–∞ –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω—ã—Ö –æ—à–∏–±–æ–∫ –ø—Ä–∏ –≤–≤–æ–¥–µ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è."
        )
        if attempts >= 3:
            return
        return

    try:
        birth_date = datetime.strptime(text, '%Y-%m-%d').date()
        today = datetime.now().date()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ –±—É–¥—É—â–µ–º
        if birth_date > today:
            await message.answer("‚ö†Ô∏è –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É.")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–æ–∑—Ä–∞—Å—Ç –±–æ–ª—å—à–µ 100 –ª–µ—Ç
        age = (today - birth_date).days // 365
        if age > 100:
            await message.answer("‚ö†Ô∏è –í–æ–∑—Ä–∞—Å—Ç –ø–∞—Ü–∏–µ–Ω—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 100 –ª–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        await state.update_data(birth_date=birth_date, visit_date=today)
        data = await state.get_data()
        await message.answer(
            f"‚úÖ –ü–∞—Ü–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\nüë§ –§–ò–û: {data['full_name']}\nüéÇ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {data['birth_date']}"
        )
        # –ü–µ—Ä–µ–¥–∞—á–∞ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –≤ add_patient_to_db
        await add_patient_to_db(data['full_name'], birth_date, today, db)
        await state.clear()
        await send_main_menu(message)
    except ValueError:
        attempts = await handle_attempts(
            message, state, "birthdate_attempts", 3,
            "‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î.",
            "‚ö†Ô∏è –í—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑-–∑–∞ –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω—ã—Ö –æ—à–∏–±–æ–∫ –ø—Ä–∏ –≤–≤–æ–¥–µ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è."
        )
        if attempts >= 3:
            return


async def add_patient_to_db(full_name: str, birth_date: datetime.date, visit_date: datetime.date, db):
    try:
        await db.add_patient(full_name, birth_date, visit_date)
        logger.info(f"–ü–∞—Ü–∏–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω: {full_name}, –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {birth_date}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞ {full_name} –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}")


async def process_confirmation(message: types.Message, state: FSMContext):
    await state.clear()
    await send_main_menu(message)


async def cmd_today_patients(message: types.Message, db):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.")
    patients = await db.get_today_patients()
    if patients:
        patient_list = "\n".join([f"üë§ {name} (üéÇ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {birth_date})" for name, birth_date in patients])
        await message.answer(f"üìÖ –ü–∞—Ü–∏–µ–Ω—Ç—ã, –ø—Ä–∏—à–µ–¥—à–∏–µ —Å–µ–≥–æ–¥–Ω—è:\n\n{patient_list}")
    else:
        await message.answer("–°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤.")
    await send_main_menu(message)


async def cmd_week_stats(message: types.Message, db):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –Ω–µ–¥–µ–ª—é.")
    stats = await db.get_weekly_stats()
    days = ['–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞']
    stats_message = "\n".join([f"üìÖ {days[int(day)]}: {count} –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤" for day, count in stats])
    await message.answer(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:\n\n{stats_message}")
    await send_main_menu(message)


def register_handlers(dp, db):
    async def add_patient_wrapper(message: types.Message, state: FSMContext):
        await cmd_add_patient(message, state)

    async def today_patients_wrapper(message: types.Message):
        await cmd_today_patients(message, db)

    async def week_stats_wrapper(message: types.Message):
        await cmd_week_stats(message, db)

    async def confirmation_wrapper(message: types.Message, state: FSMContext):
        await process_confirmation(message, state)

    async def birthdate_wrapper(message: types.Message, state: FSMContext):
        await process_birthdate(message, state, db)

    dp.message.register(cmd_start, Command(commands=['start']))

    dp.message.register(add_patient_wrapper, Command(commands=['add_patient']))
    dp.message.register(today_patients_wrapper, Command(commands=['today_patients']))
    dp.message.register(week_stats_wrapper, Command(commands=['week_stats']))

    dp.message.register(birthdate_wrapper, AddPatientStates.ADDING_BIRTHDATE)
    dp.message.register(process_name, AddPatientStates.ADDING_NAME)
    dp.message.register(confirmation_wrapper, AddPatientStates.CONFIRMATION)

    dp.message.register(add_patient_wrapper, lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç–∞")
    dp.message.register(today_patients_wrapper, lambda message: message.text == "üìÖ –ü–∞—Ü–∏–µ–Ω—Ç—ã —Å–µ–≥–æ–¥–Ω—è")
    dp.message.register(week_stats_wrapper, lambda message: message.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é")
